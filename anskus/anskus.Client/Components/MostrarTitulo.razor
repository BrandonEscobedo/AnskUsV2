@layout ComponentBaseHub
@inject IStateContainerOnPreg _stateContainer
<section class="preguntas__body">
    <div class="titleForTitulo">
        <div class="titleCuestionario">
            @_stateContainer.Titulo
        </div>
    </div>
    <section class="ProgressBarContainer">
        <MudProgressLinear Size="Size.Large" Color="Color.Secondary" Value="@Value" Class="my-7" />
    </section>
</section>

@code {
    [Parameter]
    public EventCallback OnTimerOff { get; set; }
    private CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();
    public int Value { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await SimulateProgressAsync(_cancellationTokenSource.Token);
    }

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }

    public async Task SimulateProgressAsync(CancellationToken cancellationToken)
    {
        Value = 0;
        try
        {
            while (Value < 100)
            {
                cancellationToken.ThrowIfCancellationRequested();

                Value += 2;
                StateHasChanged();
                await Task.Delay(130, cancellationToken);

                if (Value >= 100)
                {
                    await OnTimerOff.InvokeAsync();
                }
            }
        }
        catch (OperationCanceledException)
        {
            // Log or handle the cancellation if needed
        }
    }
}
