@page "/preguntas"
@layout ComponentBaseHub
@inject IStateContainerOnPreg _stateContainer
@implements IDisposable
@inject IJSRuntime JS
<div class="ContainerTitulo">
    <h2 class="title">
        @pregunta.pregunta
    </h2>
    <div class="ContainerTiempo">
        @segundos
    </div>
</div>


@if (MostrarBotones)
{
    if (string.IsNullOrWhiteSpace(pregunta.Imagen))
    {
        <div class="imgContainerSinImagen">
            <div class="sectionImagen">

                <div class="imgWrapper">
                    <img class="imgContainerSinImagen" />
                </div>
                <div class="trashContainer">
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="imgContainer">
            <div class="sectionImagen">

                <div class="imgWrapper">
                    <img class="imgContentPregt" src="@pregunta.Imagen" />
                </div>
                <div class="trashContainer">
                </div>
            </div>
        </div>
    }
    <section class="botones">
        @{
            int contador = 1;
        }
        @foreach (var respuesta in pregunta.Respuesta)
        {
            <div class="inp b@(contador)" id="b@(contador)" @onclick="()=>ValidarRespuesta(respuesta)">
                <button class="inpCont ContainerBtnWithImg">
                    @respuesta.respuesta
                </button>
              
            </div>
            contador++;
        }
    </section>
}
else
{
    <section>
    </section>
}
<h2 class="title">@segundos</h2>

<script type="text/javascript" src="/js/Preguntas.js">
   
</script>
@code {
    @using System.Threading;
    private Timer? _timer;
    private int segundos = 10;
    [Parameter]
    public bool MostrarBotones { get; set; } = true;
    private Pregunta pregunta { get; set; } = new();
    public bool PuedeContestar = true;
    private bool eventCallPreguntaContestada = false;
    [Parameter]
    public EventCallback<DatosPregunta> OnPreguntaContestada { get; set; }
    private DatosPregunta datosPregunta = new();
    [Parameter]
    public EventCallback OnSiguiente { get; set; }
    private bool tiempoExpirado = false;
    private List<Respuesta> respuestasCorrectas = new();


    protected override void OnInitialized()
    {
        pregunta = _stateContainer.Pregunta;
        _timer = new Timer(OnTimerCallback, null, 1000, 1000);
        respuestasCorrectas = pregunta.Respuesta.Where(x => x.RCorrecta == true).ToList();
        base.OnInitialized();
    }

    private async void ValidarRespuesta(Respuesta respuesta)
    {
        if (PuedeContestar)
        {
            if (respuestasCorrectas.Contains(respuesta))
            {
                datosPregunta.puntos = segundos * 13;
                datosPregunta.esCorrecto = true;
            }

            await OnPreguntaContestada.InvokeAsync(datosPregunta);
            eventCallPreguntaContestada = true;
        }
        PuedeContestar = false;
        await InvokeAsync(StateHasChanged);
    }
    public async Task MostrarRespuestas()
    {
        int total = pregunta.Respuesta.Count;
        for(int i = 0; i <= total; i++)
        {
            if (pregunta.Respuesta[i].RCorrecta == true)
            {
                await JS.InvokeVoidAsync("addImageCorrect",i+1);
            }
            else
            {
                await JS.InvokeVoidAsync("addImageInCorrect", i + 1);

            }
        }
    }
    private async void OnTimerCallback(object? state)
    {
        segundos -= 1;
        if (segundos == 0)
        {
            tiempoExpirado = true;
            _timer?.Change(Timeout.Infinite, 0);
            _timer?.Dispose();
            _timer = null;

            if (!eventCallPreguntaContestada)
            {
                await OnPreguntaContestada.InvokeAsync(datosPregunta);
            }
            PuedeContestar = false;

            await OnSiguiente.InvokeAsync();
            await MostrarRespuestas();
        }
        await InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        _timer?.Dispose();
    }
}
