@page "/Lobby/OnGame/Pregunta"
@inject IStateJugador _stateJugador
@layout ComponentBaseHub
@inject IHubJugadorServices _hubJugadorService
<section class="preguntas__body">

    <PreguntaComponent OnSiguiente="Siguiente" MostrarBotones="@mostrar"
                       OnPreguntaContestada="PreguntaContestada">
    </PreguntaComponent>

    @if (MostrarValidar)
    {
        <h2 class="title"> Revisando tu respuesta...</h2>
    }
    <div class="ContainerFooter" id="footerDiv">
        <div class="ContainerFooterSection">
            <div class="TotalPreguntas">
                3/10
            </div>
            <div class="TotalPuntos">
                Puntos:29183
            </div>
        </div>
    </div>
</section>

@code {
    @using System.Threading;
    private Timer? _timer;
    private int segundos = 10;
    private bool MostrarValidar = false;
    DatosPregunta DatosPregunta = new();
    private bool mostrar = true;
    private void Siguiente()
    {
        mostrar = true;
        MostrarValidar = false;
        _timer = new Timer(OnTimerCallback, null, 1000, 1000);

    }

    private async void PreguntaContestada(DatosPregunta DatosPreg)
    {

        _stateJugador.participante.PuntosAnteriores += _stateJugador.participante.PuntosActuales;
        _stateJugador.participante.PuntosActuales += DatosPreg.puntos;
        if (DatosPreg.esCorrecto)
        {
            _stateJugador.participante.CantidadPacertadas += 1;
        }
        mostrar = false;
        MostrarValidar = true;
        await _hubJugadorService.MandarPreguntaContestada();
        DatosPregunta = DatosPreg;
       
        //Crear funcion para mostrar los nuevos puntos y si escorrecto
    }

    private async void OnTimerCallback(object? state)
    {
        segundos -= 1;
        if (segundos == 0)
        {
            _timer?.Change(Timeout.Infinite, 0);
            _timer?.Dispose();
            _timer = null;
        }
        await InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {

    }

}
