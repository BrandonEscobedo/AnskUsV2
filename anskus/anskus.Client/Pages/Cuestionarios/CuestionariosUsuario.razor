@page "/MisCuestionarios"
@inject ICuestionarioService _cuestionarioService
@inject ICuestionarioActivoServices _cuestionarioActivoServices
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SweetAlertService _sweetAlert
<link rel="stylesheet" href="/css/CuestionariosUsuario.css" />
<MudContainer>
    @if (isLoading)
    {
        @if (isAuthenticated == false)
        {
            <MudText Typo="Typo.h6" Color="Color.Error">Debes iniciar sesión para ver tus cuestionarios.</MudText>
        }
        else if (Cuestionarios != null && Cuestionarios.Any())
        {
            @foreach (var cuestionario in Cuestionarios)
            {
                <div class="CardsUserContainer">
                    @if (cuestionario.Estado == EstadoCuestionario.Activo)
                    {
                        <div class="card cardActivo ContainerCard">
                            <div class="textContainerClass">
                                <div class="TittleCuestionario">
                                    @cuestionario.Titulo
                                </div>
                                <div class="tittlePreguntasTotal">
                                    @cuestionario.Pregunta.Count Preguntas
                                </div>
                                <div class="TittleCreado">
                                    Creador el: @cuestionario.FechaCreacion
                                </div>
                            </div>
                            <div class="buttonContainers">
                                <div @onclick="()=>IniciarCuestionario(cuestionario)" class="btnCard Activarbtn">
                                    Comenzar
                                </div>
                                <div @onclick="()=>EditarCuestionario(cuestionario)" class="btnCard Editarbtn">
                                    Editar
                                </div>
                                <div @onclick="()=>EliminarCuestionario(cuestionario)" class="btnCard Eliminarbtn">
                                    Eliminar
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="card  ContainerCard">
                            <div class="textContainerClass">
                                <div class="TittleCuestionario">
                                    @cuestionario.Titulo
                                </div>
                                <div class="tittlePreguntasTotal">
                                    @cuestionario.Pregunta.Count Preguntas
                                </div>
                                <div class="TittleCreado">
                                    Creador el: @cuestionario.FechaCreacion
                                </div>
                            </div>
                            <div class="buttonContainers">
                                <div @onclick="()=>IniciarCuestionario(cuestionario)" class="btnCard Activarbtn">
                                    Comenzar
                                </div>
                                <div @onclick="()=>EditarCuestionario(cuestionario)" class="btnCard Editarbtn">
                                    Editar
                                </div>
                                <div @onclick="()=>EliminarCuestionario(cuestionario)" class="btnCard Eliminarbtn">
                                    Eliminar
                                </div>
                                @if (cuestionario.Estado == EstadoCuestionario.Borrador)
                                {
                                    <div class="EstadoCuestionarioBorrador">
                                        Borrador
                                    </div>
                                }

                            </div>
                        </div>
                    }

                </div>
            }
        }
        else
        {
            <h1>Aun no tienes cuestionarios</h1>
            <a href="CrearCuestionario">Crear cuestionarios</a>
        }
    }

</MudContainer>

@code {
    private List<Cuestionario> Cuestionarios;
    private bool isLoading = false;
    private bool isAuthenticated = false;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(800);
            isLoading = true;
            StateHasChanged();
        }

    }
    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            Cuestionarios = await _cuestionarioService.GetCuestionariobyUserAsync();
        }
    }

    private void EditarCuestionario(Cuestionario cuestionario)
    {
        _navigationManager.NavigateTo($"/Cuestionario/{cuestionario.IdCuestionario}");
    }
    private async void EliminarCuestionario(Cuestionario cuestionario)
    {
        SweetAlertResult result = await _sweetAlert.FireAsync(new SweetAlertOptions
            {
                Title = "Advertencia",
                Text = "¿Estas seguro de eliminar este cuestionario? No lo podras recuperar al confirmar la acción",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si",
                CancelButtonText = "Cancelar"
            });
        if (!string.IsNullOrEmpty(result.Value))
        {
            bool response = await _cuestionarioService.RemoveCuestionarioAsync(cuestionario.IdCuestionario);
            if (response)
            {
                await _sweetAlert.FireAsync(new SweetAlertOptions
                    {
                        Title = "Éxito",
                        Text = "El cuestionario ha sido eliminado correctamente.",
                        Icon = SweetAlertIcon.Success
                    });
                Cuestionarios = await _cuestionarioService.GetCuestionariobyUserAsync();
                StateHasChanged();
            }
            else
            {
                await _sweetAlert.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "No se pudo eliminar el cuestionario. Por favor, intenta nuevamente.",
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
    }
    private async void IniciarCuestionario(Cuestionario cuestionario)
    {
        if (cuestionario.Estado == EstadoCuestionario.Borrador)
        {
            await _sweetAlert.FireAsync("Oops...", "No puedes activar un cuestionario borrador, editalo y completa los campos requeridos ", SweetAlertIcon.Warning);
        }
        else if (cuestionario.Estado == EstadoCuestionario.Activo)
        {
            SweetAlertResult result = await _sweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Advertencia",
                    Text = "Este cuestionario se encuentra esta activo ¿deseas desactivarlo para iniciar uno nuevo?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Si",
                    CancelButtonText = "Cancelar"
                });
            if (!string.IsNullOrEmpty(result.Value))
            {
                await _cuestionarioActivoServices.EliminarCuestionarioActivoAsync(cuestionario.IdCuestionario);
                Cuestionarios = await _cuestionarioService.GetCuestionariobyUserAsync();
                StateHasChanged();
            }
        }
        else
        {
            var result = await _cuestionarioActivoServices.ActivarCuestionario(cuestionario.IdCuestionario);
            if (result != Guid.Empty)
            {
                _navigationManager.NavigateTo($"/Lobby");
            }
        }

    }
}
